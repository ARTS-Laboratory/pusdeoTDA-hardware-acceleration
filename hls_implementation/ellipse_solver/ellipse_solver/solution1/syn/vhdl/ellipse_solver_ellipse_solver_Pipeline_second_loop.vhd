-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ellipse_solver_ellipse_solver_Pipeline_second_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outData_12_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_11_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_11_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_12_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_13_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_14_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_15_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_16_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_17_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_18_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_19_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_20_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_21_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_22_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_23_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_24_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_25_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_26_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_27_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_28_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_29_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_30_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_31_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_32_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_33_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_34_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_35_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_36_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_37_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_38_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_39_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_40_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_41_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_42_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_43_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_44_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_45_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_46_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_47_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_48_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_49_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_50_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_51_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_52_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_53_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_54_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_55_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_56_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_57_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_58_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_59_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_60_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_61_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_62_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_63_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_64_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_65_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_66_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_67_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_68_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_69_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_70_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_71_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_72_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_73_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_74_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_75_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_76_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_77_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_78_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_79_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_80_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_81_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_82_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_83_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_84_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_85_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_86_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_87_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_88_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_89_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_90_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_91_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_92_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_93_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_94_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_95_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_96_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_97_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_98_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_99_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_100_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_101_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_102_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    dataHard_V_103_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    outData_38_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_38_out_ap_vld : OUT STD_LOGIC;
    outData_37_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_37_out_ap_vld : OUT STD_LOGIC;
    outData_36_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_36_out_ap_vld : OUT STD_LOGIC;
    outData_35_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_35_out_ap_vld : OUT STD_LOGIC;
    outData_34_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_34_out_ap_vld : OUT STD_LOGIC;
    outData_33_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_33_out_ap_vld : OUT STD_LOGIC;
    outData_32_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_32_out_ap_vld : OUT STD_LOGIC;
    outData_31_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_31_out_ap_vld : OUT STD_LOGIC;
    outData_30_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_30_out_ap_vld : OUT STD_LOGIC;
    outData_29_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_29_out_ap_vld : OUT STD_LOGIC;
    outData_28_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_28_out_ap_vld : OUT STD_LOGIC;
    outData_27_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_27_out_ap_vld : OUT STD_LOGIC;
    outData_26_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outData_26_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ellipse_solver_ellipse_solver_Pipeline_second_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln37_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln37_fu_1238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_load_fu_1229_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outData_fu_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_13_fu_1509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_1_fu_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_2_fu_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_3_fu_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_4_fu_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_5_fu_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_6_fu_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_7_fu_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_8_fu_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_9_fu_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_10_fu_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_11_fu_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal outData_12_fu_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_7_fu_1410_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1429_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1372_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1391_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1353_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1448_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1283_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1334_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_5_fu_1485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_4_fu_1479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_1473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_1467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_2_fu_1497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1302_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_6_fu_1503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_3_fu_1491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_802 : BOOLEAN;
    signal ap_condition_805 : BOOLEAN;
    signal ap_condition_808 : BOOLEAN;
    signal ap_condition_811 : BOOLEAN;
    signal ap_condition_814 : BOOLEAN;
    signal ap_condition_817 : BOOLEAN;
    signal ap_condition_820 : BOOLEAN;
    signal ap_condition_823 : BOOLEAN;
    signal ap_condition_826 : BOOLEAN;
    signal ap_condition_829 : BOOLEAN;
    signal ap_condition_832 : BOOLEAN;
    signal ap_condition_835 : BOOLEAN;
    signal ap_condition_838 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component ellipse_solver_mux_134_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ellipse_solver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_134_32_1_1_U131 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_reload,
        din1 => dataHard_V_1_reload,
        din2 => dataHard_V_2_reload,
        din3 => dataHard_V_3_reload,
        din4 => dataHard_V_4_reload,
        din5 => dataHard_V_5_reload,
        din6 => dataHard_V_6_reload,
        din7 => dataHard_V_7_reload,
        din8 => dataHard_V_8_reload,
        din9 => dataHard_V_9_reload,
        din10 => dataHard_V_10_reload,
        din11 => dataHard_V_11_reload,
        din12 => dataHard_V_12_reload,
        din13 => i_fu_310,
        dout => tmp_fu_1283_p15);

    mux_134_32_1_1_U132 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => outData_fu_314,
        din1 => outData_1_fu_318,
        din2 => outData_2_fu_322,
        din3 => outData_3_fu_326,
        din4 => outData_4_fu_330,
        din5 => outData_5_fu_334,
        din6 => outData_6_fu_338,
        din7 => outData_7_fu_342,
        din8 => outData_8_fu_346,
        din9 => outData_9_fu_350,
        din10 => outData_10_fu_354,
        din11 => outData_11_fu_358,
        din12 => outData_12_fu_362,
        din13 => i_fu_310,
        dout => tmp_2_fu_1302_p15);

    mux_134_32_1_1_U133 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_13_reload,
        din1 => dataHard_V_14_reload,
        din2 => dataHard_V_15_reload,
        din3 => dataHard_V_16_reload,
        din4 => dataHard_V_17_reload,
        din5 => dataHard_V_18_reload,
        din6 => dataHard_V_19_reload,
        din7 => dataHard_V_20_reload,
        din8 => dataHard_V_21_reload,
        din9 => dataHard_V_22_reload,
        din10 => dataHard_V_23_reload,
        din11 => dataHard_V_24_reload,
        din12 => dataHard_V_25_reload,
        din13 => i_fu_310,
        dout => tmp_3_fu_1334_p15);

    mux_134_32_1_1_U134 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_26_reload,
        din1 => dataHard_V_27_reload,
        din2 => dataHard_V_28_reload,
        din3 => dataHard_V_29_reload,
        din4 => dataHard_V_30_reload,
        din5 => dataHard_V_31_reload,
        din6 => dataHard_V_32_reload,
        din7 => dataHard_V_33_reload,
        din8 => dataHard_V_34_reload,
        din9 => dataHard_V_35_reload,
        din10 => dataHard_V_36_reload,
        din11 => dataHard_V_37_reload,
        din12 => dataHard_V_38_reload,
        din13 => i_fu_310,
        dout => tmp_4_fu_1353_p15);

    mux_134_32_1_1_U135 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_39_reload,
        din1 => dataHard_V_40_reload,
        din2 => dataHard_V_41_reload,
        din3 => dataHard_V_42_reload,
        din4 => dataHard_V_43_reload,
        din5 => dataHard_V_44_reload,
        din6 => dataHard_V_45_reload,
        din7 => dataHard_V_46_reload,
        din8 => dataHard_V_47_reload,
        din9 => dataHard_V_48_reload,
        din10 => dataHard_V_49_reload,
        din11 => dataHard_V_50_reload,
        din12 => dataHard_V_51_reload,
        din13 => i_fu_310,
        dout => tmp_5_fu_1372_p15);

    mux_134_32_1_1_U136 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_52_reload,
        din1 => dataHard_V_53_reload,
        din2 => dataHard_V_54_reload,
        din3 => dataHard_V_55_reload,
        din4 => dataHard_V_56_reload,
        din5 => dataHard_V_57_reload,
        din6 => dataHard_V_58_reload,
        din7 => dataHard_V_59_reload,
        din8 => dataHard_V_60_reload,
        din9 => dataHard_V_61_reload,
        din10 => dataHard_V_62_reload,
        din11 => dataHard_V_63_reload,
        din12 => dataHard_V_64_reload,
        din13 => i_fu_310,
        dout => tmp_6_fu_1391_p15);

    mux_134_32_1_1_U137 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_65_reload,
        din1 => dataHard_V_66_reload,
        din2 => dataHard_V_67_reload,
        din3 => dataHard_V_68_reload,
        din4 => dataHard_V_69_reload,
        din5 => dataHard_V_70_reload,
        din6 => dataHard_V_71_reload,
        din7 => dataHard_V_72_reload,
        din8 => dataHard_V_73_reload,
        din9 => dataHard_V_74_reload,
        din10 => dataHard_V_75_reload,
        din11 => dataHard_V_76_reload,
        din12 => dataHard_V_77_reload,
        din13 => i_fu_310,
        dout => tmp_7_fu_1410_p15);

    mux_134_32_1_1_U138 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_78_reload,
        din1 => dataHard_V_79_reload,
        din2 => dataHard_V_80_reload,
        din3 => dataHard_V_81_reload,
        din4 => dataHard_V_82_reload,
        din5 => dataHard_V_83_reload,
        din6 => dataHard_V_84_reload,
        din7 => dataHard_V_85_reload,
        din8 => dataHard_V_86_reload,
        din9 => dataHard_V_87_reload,
        din10 => dataHard_V_88_reload,
        din11 => dataHard_V_89_reload,
        din12 => dataHard_V_90_reload,
        din13 => i_fu_310,
        dout => tmp_8_fu_1429_p15);

    mux_134_32_1_1_U139 : component ellipse_solver_mux_134_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataHard_V_91_reload,
        din1 => dataHard_V_92_reload,
        din2 => dataHard_V_93_reload,
        din3 => dataHard_V_94_reload,
        din4 => dataHard_V_95_reload,
        din5 => dataHard_V_96_reload,
        din6 => dataHard_V_97_reload,
        din7 => dataHard_V_98_reload,
        din8 => dataHard_V_99_reload,
        din9 => dataHard_V_100_reload,
        din10 => dataHard_V_101_reload,
        din11 => dataHard_V_102_reload,
        din12 => dataHard_V_103_reload,
        din13 => i_fu_310,
        dout => tmp_9_fu_1448_p15);

    flow_control_loop_pipe_sequential_init_U : component ellipse_solver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_310 <= ap_const_lv4_0;
                elsif (((icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_310 <= add_ln37_fu_1238_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_10_fu_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_10_fu_354 <= outData_10_reload;
                elsif ((ap_const_boolean_1 = ap_condition_802)) then 
                    outData_10_fu_354 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_11_fu_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_11_fu_358 <= outData_11_reload;
                elsif ((ap_const_boolean_1 = ap_condition_805)) then 
                    outData_11_fu_358 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_12_fu_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_12_fu_362 <= outData_12_reload;
                elsif ((ap_const_boolean_1 = ap_condition_808)) then 
                    outData_12_fu_362 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_1_fu_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_1_fu_318 <= outData_1_reload;
                elsif ((ap_const_boolean_1 = ap_condition_811)) then 
                    outData_1_fu_318 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_2_fu_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_2_fu_322 <= outData_2_reload;
                elsif ((ap_const_boolean_1 = ap_condition_814)) then 
                    outData_2_fu_322 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_3_fu_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_3_fu_326 <= outData_3_reload;
                elsif ((ap_const_boolean_1 = ap_condition_817)) then 
                    outData_3_fu_326 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_4_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_4_fu_330 <= outData_4_reload;
                elsif ((ap_const_boolean_1 = ap_condition_820)) then 
                    outData_4_fu_330 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_5_fu_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_5_fu_334 <= outData_5_reload;
                elsif ((ap_const_boolean_1 = ap_condition_823)) then 
                    outData_5_fu_334 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_6_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_6_fu_338 <= outData_6_reload;
                elsif ((ap_const_boolean_1 = ap_condition_826)) then 
                    outData_6_fu_338 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_7_fu_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_7_fu_342 <= outData_7_reload;
                elsif ((ap_const_boolean_1 = ap_condition_829)) then 
                    outData_7_fu_342 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_8_fu_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_8_fu_346 <= outData_8_reload;
                elsif ((ap_const_boolean_1 = ap_condition_832)) then 
                    outData_8_fu_346 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_9_fu_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_9_fu_350 <= outData_9_reload;
                elsif ((ap_const_boolean_1 = ap_condition_835)) then 
                    outData_9_fu_350 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    outData_fu_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outData_fu_314 <= outData_reload;
                elsif ((ap_const_boolean_1 = ap_condition_838)) then 
                    outData_fu_314 <= outData_13_fu_1509_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln37_fu_1238_p2 <= std_logic_vector(unsigned(i_fu_310) + unsigned(ap_const_lv4_1));
    add_ln40_1_fu_1473_p2 <= std_logic_vector(unsigned(tmp_5_fu_1372_p15) + unsigned(tmp_6_fu_1391_p15));
    add_ln40_2_fu_1497_p2 <= std_logic_vector(unsigned(add_ln40_1_fu_1473_p2) + unsigned(add_ln40_fu_1467_p2));
    add_ln40_3_fu_1491_p2 <= std_logic_vector(unsigned(add_ln40_5_fu_1485_p2) + unsigned(add_ln40_4_fu_1479_p2));
    add_ln40_4_fu_1479_p2 <= std_logic_vector(unsigned(tmp_4_fu_1353_p15) + unsigned(tmp_9_fu_1448_p15));
    add_ln40_5_fu_1485_p2 <= std_logic_vector(unsigned(tmp_fu_1283_p15) + unsigned(tmp_3_fu_1334_p15));
    add_ln40_6_fu_1503_p2 <= std_logic_vector(unsigned(add_ln40_2_fu_1497_p2) + unsigned(tmp_2_fu_1302_p15));
    add_ln40_fu_1467_p2 <= std_logic_vector(unsigned(tmp_7_fu_1410_p15) + unsigned(tmp_8_fu_1429_p15));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_802_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_802 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_A) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_805_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_805 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_B) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_808_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_808 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((((i_1_load_fu_1229_p1 = ap_const_lv4_E) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0)) or ((i_1_load_fu_1229_p1 = ap_const_lv4_F) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0))) or ((i_1_load_fu_1229_p1 = ap_const_lv4_D) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0))) or ((i_1_load_fu_1229_p1 = ap_const_lv4_C) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0))));
    end process;


    ap_condition_811_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_811 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_1) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_814_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_814 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_2) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_817_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_817 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_3) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_820_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_820 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_4) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_823_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_823 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_5) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_826_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_826 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_6) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_829_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_829 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_7) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_832_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_832 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_8) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_835_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_835 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_9) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_838_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln37_fu_1232_p2, i_1_load_fu_1229_p1)
    begin
                ap_condition_838 <= ((i_1_load_fu_1229_p1 = ap_const_lv4_0) and (icmp_ln37_fu_1232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln37_fu_1232_p2)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_1_load_fu_1229_p1 <= i_fu_310;
    icmp_ln37_fu_1232_p2 <= "1" when (i_fu_310 = ap_const_lv4_D) else "0";
    outData_13_fu_1509_p2 <= std_logic_vector(unsigned(add_ln40_6_fu_1503_p2) + unsigned(add_ln40_3_fu_1491_p2));
    outData_26_out <= outData_fu_314;

    outData_26_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_26_out_ap_vld <= ap_const_logic_1;
        else 
            outData_26_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_27_out <= outData_1_fu_318;

    outData_27_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_27_out_ap_vld <= ap_const_logic_1;
        else 
            outData_27_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_28_out <= outData_2_fu_322;

    outData_28_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_28_out_ap_vld <= ap_const_logic_1;
        else 
            outData_28_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_29_out <= outData_3_fu_326;

    outData_29_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_29_out_ap_vld <= ap_const_logic_1;
        else 
            outData_29_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_30_out <= outData_4_fu_330;

    outData_30_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_30_out_ap_vld <= ap_const_logic_1;
        else 
            outData_30_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_31_out <= outData_5_fu_334;

    outData_31_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_31_out_ap_vld <= ap_const_logic_1;
        else 
            outData_31_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_32_out <= outData_6_fu_338;

    outData_32_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_32_out_ap_vld <= ap_const_logic_1;
        else 
            outData_32_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_33_out <= outData_7_fu_342;

    outData_33_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_33_out_ap_vld <= ap_const_logic_1;
        else 
            outData_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_34_out <= outData_8_fu_346;

    outData_34_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_34_out_ap_vld <= ap_const_logic_1;
        else 
            outData_34_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_35_out <= outData_9_fu_350;

    outData_35_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_35_out_ap_vld <= ap_const_logic_1;
        else 
            outData_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_36_out <= outData_10_fu_354;

    outData_36_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_36_out_ap_vld <= ap_const_logic_1;
        else 
            outData_36_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_37_out <= outData_11_fu_358;

    outData_37_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_37_out_ap_vld <= ap_const_logic_1;
        else 
            outData_37_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outData_38_out <= outData_12_fu_362;

    outData_38_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln37_fu_1232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln37_fu_1232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outData_38_out_ap_vld <= ap_const_logic_1;
        else 
            outData_38_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
