// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ellipse_solver_ellipse_solver_Pipeline_second_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outData_12_reload,
        outData_11_reload,
        outData_10_reload,
        outData_9_reload,
        outData_8_reload,
        outData_7_reload,
        outData_6_reload,
        outData_5_reload,
        outData_4_reload,
        outData_3_reload,
        outData_2_reload,
        outData_1_reload,
        outData_reload,
        dataHard_V_reload,
        dataHard_V_1_reload,
        dataHard_V_2_reload,
        dataHard_V_3_reload,
        dataHard_V_4_reload,
        dataHard_V_5_reload,
        dataHard_V_6_reload,
        dataHard_V_7_reload,
        dataHard_V_8_reload,
        dataHard_V_9_reload,
        dataHard_V_10_reload,
        dataHard_V_11_reload,
        dataHard_V_12_reload,
        dataHard_V_13_reload,
        dataHard_V_14_reload,
        dataHard_V_15_reload,
        dataHard_V_16_reload,
        dataHard_V_17_reload,
        dataHard_V_18_reload,
        dataHard_V_19_reload,
        dataHard_V_20_reload,
        dataHard_V_21_reload,
        dataHard_V_22_reload,
        dataHard_V_23_reload,
        dataHard_V_24_reload,
        dataHard_V_25_reload,
        dataHard_V_26_reload,
        dataHard_V_27_reload,
        dataHard_V_28_reload,
        dataHard_V_29_reload,
        dataHard_V_30_reload,
        dataHard_V_31_reload,
        dataHard_V_32_reload,
        dataHard_V_33_reload,
        dataHard_V_34_reload,
        dataHard_V_35_reload,
        dataHard_V_36_reload,
        dataHard_V_37_reload,
        dataHard_V_38_reload,
        dataHard_V_39_reload,
        dataHard_V_40_reload,
        dataHard_V_41_reload,
        dataHard_V_42_reload,
        dataHard_V_43_reload,
        dataHard_V_44_reload,
        dataHard_V_45_reload,
        dataHard_V_46_reload,
        dataHard_V_47_reload,
        dataHard_V_48_reload,
        dataHard_V_49_reload,
        dataHard_V_50_reload,
        dataHard_V_51_reload,
        dataHard_V_52_reload,
        dataHard_V_53_reload,
        dataHard_V_54_reload,
        dataHard_V_55_reload,
        dataHard_V_56_reload,
        dataHard_V_57_reload,
        dataHard_V_58_reload,
        dataHard_V_59_reload,
        dataHard_V_60_reload,
        dataHard_V_61_reload,
        dataHard_V_62_reload,
        dataHard_V_63_reload,
        dataHard_V_64_reload,
        dataHard_V_65_reload,
        dataHard_V_66_reload,
        dataHard_V_67_reload,
        dataHard_V_68_reload,
        dataHard_V_69_reload,
        dataHard_V_70_reload,
        dataHard_V_71_reload,
        dataHard_V_72_reload,
        dataHard_V_73_reload,
        dataHard_V_74_reload,
        dataHard_V_75_reload,
        dataHard_V_76_reload,
        dataHard_V_77_reload,
        dataHard_V_78_reload,
        dataHard_V_79_reload,
        dataHard_V_80_reload,
        dataHard_V_81_reload,
        dataHard_V_82_reload,
        dataHard_V_83_reload,
        dataHard_V_84_reload,
        dataHard_V_85_reload,
        dataHard_V_86_reload,
        dataHard_V_87_reload,
        dataHard_V_88_reload,
        dataHard_V_89_reload,
        dataHard_V_90_reload,
        dataHard_V_91_reload,
        dataHard_V_92_reload,
        dataHard_V_93_reload,
        dataHard_V_94_reload,
        dataHard_V_95_reload,
        dataHard_V_96_reload,
        dataHard_V_97_reload,
        dataHard_V_98_reload,
        dataHard_V_99_reload,
        dataHard_V_100_reload,
        dataHard_V_101_reload,
        dataHard_V_102_reload,
        dataHard_V_103_reload,
        outData_38_out,
        outData_38_out_ap_vld,
        outData_37_out,
        outData_37_out_ap_vld,
        outData_36_out,
        outData_36_out_ap_vld,
        outData_35_out,
        outData_35_out_ap_vld,
        outData_34_out,
        outData_34_out_ap_vld,
        outData_33_out,
        outData_33_out_ap_vld,
        outData_32_out,
        outData_32_out_ap_vld,
        outData_31_out,
        outData_31_out_ap_vld,
        outData_30_out,
        outData_30_out_ap_vld,
        outData_29_out,
        outData_29_out_ap_vld,
        outData_28_out,
        outData_28_out_ap_vld,
        outData_27_out,
        outData_27_out_ap_vld,
        outData_26_out,
        outData_26_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] outData_12_reload;
input  [31:0] outData_11_reload;
input  [31:0] outData_10_reload;
input  [31:0] outData_9_reload;
input  [31:0] outData_8_reload;
input  [31:0] outData_7_reload;
input  [31:0] outData_6_reload;
input  [31:0] outData_5_reload;
input  [31:0] outData_4_reload;
input  [31:0] outData_3_reload;
input  [31:0] outData_2_reload;
input  [31:0] outData_1_reload;
input  [31:0] outData_reload;
input  [31:0] dataHard_V_reload;
input  [31:0] dataHard_V_1_reload;
input  [31:0] dataHard_V_2_reload;
input  [31:0] dataHard_V_3_reload;
input  [31:0] dataHard_V_4_reload;
input  [31:0] dataHard_V_5_reload;
input  [31:0] dataHard_V_6_reload;
input  [31:0] dataHard_V_7_reload;
input  [31:0] dataHard_V_8_reload;
input  [31:0] dataHard_V_9_reload;
input  [31:0] dataHard_V_10_reload;
input  [31:0] dataHard_V_11_reload;
input  [31:0] dataHard_V_12_reload;
input  [31:0] dataHard_V_13_reload;
input  [31:0] dataHard_V_14_reload;
input  [31:0] dataHard_V_15_reload;
input  [31:0] dataHard_V_16_reload;
input  [31:0] dataHard_V_17_reload;
input  [31:0] dataHard_V_18_reload;
input  [31:0] dataHard_V_19_reload;
input  [31:0] dataHard_V_20_reload;
input  [31:0] dataHard_V_21_reload;
input  [31:0] dataHard_V_22_reload;
input  [31:0] dataHard_V_23_reload;
input  [31:0] dataHard_V_24_reload;
input  [31:0] dataHard_V_25_reload;
input  [31:0] dataHard_V_26_reload;
input  [31:0] dataHard_V_27_reload;
input  [31:0] dataHard_V_28_reload;
input  [31:0] dataHard_V_29_reload;
input  [31:0] dataHard_V_30_reload;
input  [31:0] dataHard_V_31_reload;
input  [31:0] dataHard_V_32_reload;
input  [31:0] dataHard_V_33_reload;
input  [31:0] dataHard_V_34_reload;
input  [31:0] dataHard_V_35_reload;
input  [31:0] dataHard_V_36_reload;
input  [31:0] dataHard_V_37_reload;
input  [31:0] dataHard_V_38_reload;
input  [31:0] dataHard_V_39_reload;
input  [31:0] dataHard_V_40_reload;
input  [31:0] dataHard_V_41_reload;
input  [31:0] dataHard_V_42_reload;
input  [31:0] dataHard_V_43_reload;
input  [31:0] dataHard_V_44_reload;
input  [31:0] dataHard_V_45_reload;
input  [31:0] dataHard_V_46_reload;
input  [31:0] dataHard_V_47_reload;
input  [31:0] dataHard_V_48_reload;
input  [31:0] dataHard_V_49_reload;
input  [31:0] dataHard_V_50_reload;
input  [31:0] dataHard_V_51_reload;
input  [31:0] dataHard_V_52_reload;
input  [31:0] dataHard_V_53_reload;
input  [31:0] dataHard_V_54_reload;
input  [31:0] dataHard_V_55_reload;
input  [31:0] dataHard_V_56_reload;
input  [31:0] dataHard_V_57_reload;
input  [31:0] dataHard_V_58_reload;
input  [31:0] dataHard_V_59_reload;
input  [31:0] dataHard_V_60_reload;
input  [31:0] dataHard_V_61_reload;
input  [31:0] dataHard_V_62_reload;
input  [31:0] dataHard_V_63_reload;
input  [31:0] dataHard_V_64_reload;
input  [31:0] dataHard_V_65_reload;
input  [31:0] dataHard_V_66_reload;
input  [31:0] dataHard_V_67_reload;
input  [31:0] dataHard_V_68_reload;
input  [31:0] dataHard_V_69_reload;
input  [31:0] dataHard_V_70_reload;
input  [31:0] dataHard_V_71_reload;
input  [31:0] dataHard_V_72_reload;
input  [31:0] dataHard_V_73_reload;
input  [31:0] dataHard_V_74_reload;
input  [31:0] dataHard_V_75_reload;
input  [31:0] dataHard_V_76_reload;
input  [31:0] dataHard_V_77_reload;
input  [31:0] dataHard_V_78_reload;
input  [31:0] dataHard_V_79_reload;
input  [31:0] dataHard_V_80_reload;
input  [31:0] dataHard_V_81_reload;
input  [31:0] dataHard_V_82_reload;
input  [31:0] dataHard_V_83_reload;
input  [31:0] dataHard_V_84_reload;
input  [31:0] dataHard_V_85_reload;
input  [31:0] dataHard_V_86_reload;
input  [31:0] dataHard_V_87_reload;
input  [31:0] dataHard_V_88_reload;
input  [31:0] dataHard_V_89_reload;
input  [31:0] dataHard_V_90_reload;
input  [31:0] dataHard_V_91_reload;
input  [31:0] dataHard_V_92_reload;
input  [31:0] dataHard_V_93_reload;
input  [31:0] dataHard_V_94_reload;
input  [31:0] dataHard_V_95_reload;
input  [31:0] dataHard_V_96_reload;
input  [31:0] dataHard_V_97_reload;
input  [31:0] dataHard_V_98_reload;
input  [31:0] dataHard_V_99_reload;
input  [31:0] dataHard_V_100_reload;
input  [31:0] dataHard_V_101_reload;
input  [31:0] dataHard_V_102_reload;
input  [31:0] dataHard_V_103_reload;
output  [31:0] outData_38_out;
output   outData_38_out_ap_vld;
output  [31:0] outData_37_out;
output   outData_37_out_ap_vld;
output  [31:0] outData_36_out;
output   outData_36_out_ap_vld;
output  [31:0] outData_35_out;
output   outData_35_out_ap_vld;
output  [31:0] outData_34_out;
output   outData_34_out_ap_vld;
output  [31:0] outData_33_out;
output   outData_33_out_ap_vld;
output  [31:0] outData_32_out;
output   outData_32_out_ap_vld;
output  [31:0] outData_31_out;
output   outData_31_out_ap_vld;
output  [31:0] outData_30_out;
output   outData_30_out_ap_vld;
output  [31:0] outData_29_out;
output   outData_29_out_ap_vld;
output  [31:0] outData_28_out;
output   outData_28_out_ap_vld;
output  [31:0] outData_27_out;
output   outData_27_out_ap_vld;
output  [31:0] outData_26_out;
output   outData_26_out_ap_vld;

reg ap_idle;
reg outData_38_out_ap_vld;
reg outData_37_out_ap_vld;
reg outData_36_out_ap_vld;
reg outData_35_out_ap_vld;
reg outData_34_out_ap_vld;
reg outData_33_out_ap_vld;
reg outData_32_out_ap_vld;
reg outData_31_out_ap_vld;
reg outData_30_out_ap_vld;
reg outData_29_out_ap_vld;
reg outData_28_out_ap_vld;
reg outData_27_out_ap_vld;
reg outData_26_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln37_fu_1232_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_fu_310;
wire   [3:0] add_ln37_fu_1238_p2;
wire    ap_loop_init;
wire   [3:0] i_1_load_fu_1229_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] outData_fu_314;
wire   [31:0] outData_13_fu_1509_p2;
reg   [31:0] outData_1_fu_318;
reg   [31:0] outData_2_fu_322;
reg   [31:0] outData_3_fu_326;
reg   [31:0] outData_4_fu_330;
reg   [31:0] outData_5_fu_334;
reg   [31:0] outData_6_fu_338;
reg   [31:0] outData_7_fu_342;
reg   [31:0] outData_8_fu_346;
reg   [31:0] outData_9_fu_350;
reg   [31:0] outData_10_fu_354;
reg   [31:0] outData_11_fu_358;
reg   [31:0] outData_12_fu_362;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_7_fu_1410_p15;
wire   [31:0] tmp_8_fu_1429_p15;
wire   [31:0] tmp_5_fu_1372_p15;
wire   [31:0] tmp_6_fu_1391_p15;
wire   [31:0] tmp_4_fu_1353_p15;
wire   [31:0] tmp_9_fu_1448_p15;
wire   [31:0] tmp_fu_1283_p15;
wire   [31:0] tmp_3_fu_1334_p15;
wire   [31:0] add_ln40_5_fu_1485_p2;
wire   [31:0] add_ln40_4_fu_1479_p2;
wire   [31:0] add_ln40_1_fu_1473_p2;
wire   [31:0] add_ln40_fu_1467_p2;
wire   [31:0] add_ln40_2_fu_1497_p2;
wire   [31:0] tmp_2_fu_1302_p15;
wire   [31:0] add_ln40_6_fu_1503_p2;
wire   [31:0] add_ln40_3_fu_1491_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_802;
reg    ap_condition_805;
reg    ap_condition_808;
reg    ap_condition_811;
reg    ap_condition_814;
reg    ap_condition_817;
reg    ap_condition_820;
reg    ap_condition_823;
reg    ap_condition_826;
reg    ap_condition_829;
reg    ap_condition_832;
reg    ap_condition_835;
reg    ap_condition_838;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U131(
    .din0(dataHard_V_reload),
    .din1(dataHard_V_1_reload),
    .din2(dataHard_V_2_reload),
    .din3(dataHard_V_3_reload),
    .din4(dataHard_V_4_reload),
    .din5(dataHard_V_5_reload),
    .din6(dataHard_V_6_reload),
    .din7(dataHard_V_7_reload),
    .din8(dataHard_V_8_reload),
    .din9(dataHard_V_9_reload),
    .din10(dataHard_V_10_reload),
    .din11(dataHard_V_11_reload),
    .din12(dataHard_V_12_reload),
    .din13(i_fu_310),
    .dout(tmp_fu_1283_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U132(
    .din0(outData_fu_314),
    .din1(outData_1_fu_318),
    .din2(outData_2_fu_322),
    .din3(outData_3_fu_326),
    .din4(outData_4_fu_330),
    .din5(outData_5_fu_334),
    .din6(outData_6_fu_338),
    .din7(outData_7_fu_342),
    .din8(outData_8_fu_346),
    .din9(outData_9_fu_350),
    .din10(outData_10_fu_354),
    .din11(outData_11_fu_358),
    .din12(outData_12_fu_362),
    .din13(i_fu_310),
    .dout(tmp_2_fu_1302_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U133(
    .din0(dataHard_V_13_reload),
    .din1(dataHard_V_14_reload),
    .din2(dataHard_V_15_reload),
    .din3(dataHard_V_16_reload),
    .din4(dataHard_V_17_reload),
    .din5(dataHard_V_18_reload),
    .din6(dataHard_V_19_reload),
    .din7(dataHard_V_20_reload),
    .din8(dataHard_V_21_reload),
    .din9(dataHard_V_22_reload),
    .din10(dataHard_V_23_reload),
    .din11(dataHard_V_24_reload),
    .din12(dataHard_V_25_reload),
    .din13(i_fu_310),
    .dout(tmp_3_fu_1334_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U134(
    .din0(dataHard_V_26_reload),
    .din1(dataHard_V_27_reload),
    .din2(dataHard_V_28_reload),
    .din3(dataHard_V_29_reload),
    .din4(dataHard_V_30_reload),
    .din5(dataHard_V_31_reload),
    .din6(dataHard_V_32_reload),
    .din7(dataHard_V_33_reload),
    .din8(dataHard_V_34_reload),
    .din9(dataHard_V_35_reload),
    .din10(dataHard_V_36_reload),
    .din11(dataHard_V_37_reload),
    .din12(dataHard_V_38_reload),
    .din13(i_fu_310),
    .dout(tmp_4_fu_1353_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U135(
    .din0(dataHard_V_39_reload),
    .din1(dataHard_V_40_reload),
    .din2(dataHard_V_41_reload),
    .din3(dataHard_V_42_reload),
    .din4(dataHard_V_43_reload),
    .din5(dataHard_V_44_reload),
    .din6(dataHard_V_45_reload),
    .din7(dataHard_V_46_reload),
    .din8(dataHard_V_47_reload),
    .din9(dataHard_V_48_reload),
    .din10(dataHard_V_49_reload),
    .din11(dataHard_V_50_reload),
    .din12(dataHard_V_51_reload),
    .din13(i_fu_310),
    .dout(tmp_5_fu_1372_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U136(
    .din0(dataHard_V_52_reload),
    .din1(dataHard_V_53_reload),
    .din2(dataHard_V_54_reload),
    .din3(dataHard_V_55_reload),
    .din4(dataHard_V_56_reload),
    .din5(dataHard_V_57_reload),
    .din6(dataHard_V_58_reload),
    .din7(dataHard_V_59_reload),
    .din8(dataHard_V_60_reload),
    .din9(dataHard_V_61_reload),
    .din10(dataHard_V_62_reload),
    .din11(dataHard_V_63_reload),
    .din12(dataHard_V_64_reload),
    .din13(i_fu_310),
    .dout(tmp_6_fu_1391_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U137(
    .din0(dataHard_V_65_reload),
    .din1(dataHard_V_66_reload),
    .din2(dataHard_V_67_reload),
    .din3(dataHard_V_68_reload),
    .din4(dataHard_V_69_reload),
    .din5(dataHard_V_70_reload),
    .din6(dataHard_V_71_reload),
    .din7(dataHard_V_72_reload),
    .din8(dataHard_V_73_reload),
    .din9(dataHard_V_74_reload),
    .din10(dataHard_V_75_reload),
    .din11(dataHard_V_76_reload),
    .din12(dataHard_V_77_reload),
    .din13(i_fu_310),
    .dout(tmp_7_fu_1410_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U138(
    .din0(dataHard_V_78_reload),
    .din1(dataHard_V_79_reload),
    .din2(dataHard_V_80_reload),
    .din3(dataHard_V_81_reload),
    .din4(dataHard_V_82_reload),
    .din5(dataHard_V_83_reload),
    .din6(dataHard_V_84_reload),
    .din7(dataHard_V_85_reload),
    .din8(dataHard_V_86_reload),
    .din9(dataHard_V_87_reload),
    .din10(dataHard_V_88_reload),
    .din11(dataHard_V_89_reload),
    .din12(dataHard_V_90_reload),
    .din13(i_fu_310),
    .dout(tmp_8_fu_1429_p15)
);

ellipse_solver_mux_134_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_134_32_1_1_U139(
    .din0(dataHard_V_91_reload),
    .din1(dataHard_V_92_reload),
    .din2(dataHard_V_93_reload),
    .din3(dataHard_V_94_reload),
    .din4(dataHard_V_95_reload),
    .din5(dataHard_V_96_reload),
    .din6(dataHard_V_97_reload),
    .din7(dataHard_V_98_reload),
    .din8(dataHard_V_99_reload),
    .din9(dataHard_V_100_reload),
    .din10(dataHard_V_101_reload),
    .din11(dataHard_V_102_reload),
    .din12(dataHard_V_103_reload),
    .din13(i_fu_310),
    .dout(tmp_9_fu_1448_p15)
);

ellipse_solver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_310 <= 4'd0;
        end else if (((icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_310 <= add_ln37_fu_1238_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_10_fu_354 <= outData_10_reload;
        end else if ((1'b1 == ap_condition_802)) begin
            outData_10_fu_354 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_11_fu_358 <= outData_11_reload;
        end else if ((1'b1 == ap_condition_805)) begin
            outData_11_fu_358 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_12_fu_362 <= outData_12_reload;
        end else if ((1'b1 == ap_condition_808)) begin
            outData_12_fu_362 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_1_fu_318 <= outData_1_reload;
        end else if ((1'b1 == ap_condition_811)) begin
            outData_1_fu_318 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_2_fu_322 <= outData_2_reload;
        end else if ((1'b1 == ap_condition_814)) begin
            outData_2_fu_322 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_3_fu_326 <= outData_3_reload;
        end else if ((1'b1 == ap_condition_817)) begin
            outData_3_fu_326 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_4_fu_330 <= outData_4_reload;
        end else if ((1'b1 == ap_condition_820)) begin
            outData_4_fu_330 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_5_fu_334 <= outData_5_reload;
        end else if ((1'b1 == ap_condition_823)) begin
            outData_5_fu_334 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_6_fu_338 <= outData_6_reload;
        end else if ((1'b1 == ap_condition_826)) begin
            outData_6_fu_338 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_7_fu_342 <= outData_7_reload;
        end else if ((1'b1 == ap_condition_829)) begin
            outData_7_fu_342 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_8_fu_346 <= outData_8_reload;
        end else if ((1'b1 == ap_condition_832)) begin
            outData_8_fu_346 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_9_fu_350 <= outData_9_reload;
        end else if ((1'b1 == ap_condition_835)) begin
            outData_9_fu_350 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outData_fu_314 <= outData_reload;
        end else if ((1'b1 == ap_condition_838)) begin
            outData_fu_314 <= outData_13_fu_1509_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_26_out_ap_vld = 1'b1;
    end else begin
        outData_26_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_27_out_ap_vld = 1'b1;
    end else begin
        outData_27_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_28_out_ap_vld = 1'b1;
    end else begin
        outData_28_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_29_out_ap_vld = 1'b1;
    end else begin
        outData_29_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_30_out_ap_vld = 1'b1;
    end else begin
        outData_30_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_31_out_ap_vld = 1'b1;
    end else begin
        outData_31_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_32_out_ap_vld = 1'b1;
    end else begin
        outData_32_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_33_out_ap_vld = 1'b1;
    end else begin
        outData_33_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_34_out_ap_vld = 1'b1;
    end else begin
        outData_34_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_35_out_ap_vld = 1'b1;
    end else begin
        outData_35_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_36_out_ap_vld = 1'b1;
    end else begin
        outData_36_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_37_out_ap_vld = 1'b1;
    end else begin
        outData_37_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outData_38_out_ap_vld = 1'b1;
    end else begin
        outData_38_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_1238_p2 = (i_fu_310 + 4'd1);

assign add_ln40_1_fu_1473_p2 = (tmp_5_fu_1372_p15 + tmp_6_fu_1391_p15);

assign add_ln40_2_fu_1497_p2 = (add_ln40_1_fu_1473_p2 + add_ln40_fu_1467_p2);

assign add_ln40_3_fu_1491_p2 = (add_ln40_5_fu_1485_p2 + add_ln40_4_fu_1479_p2);

assign add_ln40_4_fu_1479_p2 = (tmp_4_fu_1353_p15 + tmp_9_fu_1448_p15);

assign add_ln40_5_fu_1485_p2 = (tmp_fu_1283_p15 + tmp_3_fu_1334_p15);

assign add_ln40_6_fu_1503_p2 = (add_ln40_2_fu_1497_p2 + tmp_2_fu_1302_p15);

assign add_ln40_fu_1467_p2 = (tmp_7_fu_1410_p15 + tmp_8_fu_1429_p15);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_802 = ((i_1_load_fu_1229_p1 == 4'd10) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_805 = ((i_1_load_fu_1229_p1 == 4'd11) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_808 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((((i_1_load_fu_1229_p1 == 4'd14) & (icmp_ln37_fu_1232_p2 == 1'd0)) | ((i_1_load_fu_1229_p1 == 4'd15) & (icmp_ln37_fu_1232_p2 == 1'd0))) | ((i_1_load_fu_1229_p1 == 4'd13) & (icmp_ln37_fu_1232_p2 == 1'd0))) | ((i_1_load_fu_1229_p1 == 4'd12) & (icmp_ln37_fu_1232_p2 == 1'd0))));
end

always @ (*) begin
    ap_condition_811 = ((i_1_load_fu_1229_p1 == 4'd1) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_814 = ((i_1_load_fu_1229_p1 == 4'd2) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_817 = ((i_1_load_fu_1229_p1 == 4'd3) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_820 = ((i_1_load_fu_1229_p1 == 4'd4) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_823 = ((i_1_load_fu_1229_p1 == 4'd5) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_826 = ((i_1_load_fu_1229_p1 == 4'd6) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_829 = ((i_1_load_fu_1229_p1 == 4'd7) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_832 = ((i_1_load_fu_1229_p1 == 4'd8) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_835 = ((i_1_load_fu_1229_p1 == 4'd9) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_838 = ((i_1_load_fu_1229_p1 == 4'd0) & (icmp_ln37_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_1_load_fu_1229_p1 = i_fu_310;

assign icmp_ln37_fu_1232_p2 = ((i_fu_310 == 4'd13) ? 1'b1 : 1'b0);

assign outData_13_fu_1509_p2 = (add_ln40_6_fu_1503_p2 + add_ln40_3_fu_1491_p2);

assign outData_26_out = outData_fu_314;

assign outData_27_out = outData_1_fu_318;

assign outData_28_out = outData_2_fu_322;

assign outData_29_out = outData_3_fu_326;

assign outData_30_out = outData_4_fu_330;

assign outData_31_out = outData_5_fu_334;

assign outData_32_out = outData_6_fu_338;

assign outData_33_out = outData_7_fu_342;

assign outData_34_out = outData_8_fu_346;

assign outData_35_out = outData_9_fu_350;

assign outData_36_out = outData_10_fu_354;

assign outData_37_out = outData_11_fu_358;

assign outData_38_out = outData_12_fu_362;

endmodule //ellipse_solver_ellipse_solver_Pipeline_second_loop
